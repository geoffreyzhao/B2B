/*! Copyright (c) 2013 Brandon Aaron (http://brandonaaron.net) * Licensed under the MIT License (LICENSE.txt). * * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers. * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix. * Thanks to: Seamus Leahy for adding deltaX and deltaY * * Version: 3.1.3 * * Requires: 1.2.2+ */(function (factory) {    if ( typeof define === 'function' && define.amd ) {        // AMD. Register as an anonymous module.        define(['jquery'], factory);    } else if (typeof exports === 'object') {        // Node/CommonJS style for Browserify        module.exports = factory;    } else {        // Browser globals        factory(jQuery);    }}(function ($) {    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];    var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];    var lowestDelta, lowestDeltaXY;    if ( $.event.fixHooks ) {        for ( var i = toFix.length; i; ) {            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;        }    }    $.event.special.mousewheel = {        setup: function() {            if ( this.addEventListener ) {                for ( var i = toBind.length; i; ) {                    this.addEventListener( toBind[--i], handler, false );                }            } else {                this.onmousewheel = handler;            }        },        teardown: function() {            if ( this.removeEventListener ) {                for ( var i = toBind.length; i; ) {                    this.removeEventListener( toBind[--i], handler, false );                }            } else {                this.onmousewheel = null;            }        }    };    $.fn.extend({        mousewheel: function(fn) {            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");        },        unmousewheel: function(fn) {            return this.unbind("mousewheel", fn);        }    });    function handler(event) {        var orgEvent = event || window.event,            args = [].slice.call(arguments, 1),            delta = 0,            deltaX = 0,            deltaY = 0,            absDelta = 0,            absDeltaXY = 0,            fn;        event = $.event.fix(orgEvent);        event.type = "mousewheel";        // Old school scrollwheel delta        if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta; }        if ( orgEvent.detail )     { delta = orgEvent.detail * -1; }        // New school wheel delta (wheel event)        if ( orgEvent.deltaY ) {            deltaY = orgEvent.deltaY * -1;            delta  = deltaY;        }        if ( orgEvent.deltaX ) {            deltaX = orgEvent.deltaX;            delta  = deltaX * -1;        }        // Webkit        if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY; }        if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = orgEvent.wheelDeltaX * -1; }        // Look for lowest delta to normalize the delta values        absDelta = Math.abs(delta);        if ( !lowestDelta || absDelta < lowestDelta ) { lowestDelta = absDelta; }        absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));        if ( !lowestDeltaXY || absDeltaXY < lowestDeltaXY ) { lowestDeltaXY = absDeltaXY; }        // Get a whole value for the deltas        fn = delta > 0 ? 'floor' : 'ceil';        delta  = Math[fn](delta / lowestDelta);        deltaX = Math[fn](deltaX / lowestDeltaXY);        deltaY = Math[fn](deltaY / lowestDeltaXY);        // Add event and delta to the front of the arguments        args.unshift(event, delta, deltaX, deltaY);        return ($.event.dispatch || $.event.handle).apply(this, args);    }}));/** * FixCol Funtions */function FixCol(options) {	this.options = $.extend({},this.defaults, options);	this.init();}FixCol.prototype = {    defaults : {		wrapClass: ".scroll",        scrollClass: "",        autoWrap : false,//自动包裹,如果设置为true ,则自动保存最后列的元素到 div 中		fixableClass: ".fixable",        fixCol: "td:last",        lastColClass:".last_col",		wheelStep: 15,//鼠标滚轮滚动是 滚动条移动速度		hightlightClick: false,        hightlightCallback:function(event){            $("input[type='checkbox']",event.currentTarget).each(function(){                $(this).prop("checked",!$(this).prop("checked"));            });        },		hightlightClass: ".hightlight",        width:80,        rowBgColor:{            thead:{               even:"#e4e4e4",               odd:"#e4e4e4"            },            tbody:{                even: "#ffffff",                odd:"#f0f0f0"            }        },        borderLeft:"1px solid #E0E0E0"	},	init: function() {		cur = this;		var sel = this.options.wrapClass + " " + this.options.fixableClass;		var cw = $(this.options.wrapClass + " " + this.options.scrollClass).width();        $(this.options.wrapClass + this.options.scrollClass).css({            "overflow-x":"scroll",            "overflow-y":"hidden",            "position":"relative"        }).scrollLeft(0);        this.maxScollLeft = $(this.options.wrapClass + " table").outerWidth() - $(this.options.wrapClass).width();        function wrapDiv(){            $(cur.options.wrapClass + " tbody tr").each(function(){                var fixCol = cur.options.fixCol;                 var child = $(fixCol,this).children();                var div = $("<div class='" + cur.options.fixableClass.substring(1) + "'></div>");                if(child.length == 0){                    div.append($(fixCol,this).html());                    $(fixCol,this).html(div);                }else{                    div.append(child);                    $(fixCol,this).append(div);                }            });        };        if(this.options.autoWrap && $(this.options.wrapClass + " tbody " + this.options.fixableClass).size() == 0){            wrapDiv();        }        function fixable(index){            var bgColor = {};            if($(this).parents("thead").size() > 0 ){                bgColor = cur.options.rowBgColor.thead;            }else{                bgColor = cur.options.rowBgColor.tbody;            }            $(this).parent().addClass(cur.options.lastColClass.substring(1));            var parentHeight = $(this).parent().height();            //var parentWidth = $(this).parent().width();            //console.log(parentHeight);            $(this).css({                //"width": cur.options.width + 'px',                //"width": parentWidth + 'px',                "height": parentHeight + 'px',                "line-height": parentHeight + 'px',                "background-color": ( (index + 1) % 2) == 0 ? bgColor.odd : bgColor.even            });			var w = $(this).width();			var pos = $(this).position();            var setleft = parseInt(pos.left) - cw + w;            //console.log(pos.left,w,setleft);            //var setleft = cur.maxScollLeft;             if(setleft > 0){                $(this).css({                    "left": "-" + setleft + 'px',                    "border-left" : cur.options.borderLeft,                    "border-right" : cur.options.borderLeft                });            }else{                $(this).css({                    "left":"0px",                    "border-left" : "none",                    "border-right" : "none"                });            }        };		$(this.options.wrapClass + " thead " + this.options.fixableClass).each(fixable);		$(this.options.wrapClass + " tbody " + this.options.fixableClass).each(fixable);		this.origin_pos = $(sel + ":eq(0)").position();        this.hightlight();        this.bindScroll();        this.bindMouseWheel();	},    hightlight:function(){        var cur = this;        var hclass = this.options.hightlightClass.substring(1);		if (this.options.hightlightClick) {			$(this.options.wrapClass + " tbody tr").each(function() {				$(this).click(function(event) {					if ($(this).hasClass(hclass)) {						$(this).removeClass(hclass);					} else {						$(this).addClass(hclass);					}                    if(typeof cur.options.hightlightCallback == "function"){                        cur.options.hightlightCallback(event);                    }				});			});		};    },    bindScroll:function(){        var cur = this;		var sel = this.options.wrapClass + " " + this.options.fixableClass;		var cw = $(this.options.wrapClass + " " + this.options.scrollClass).width();		$(this.options.wrapClass + " " + this.options.scrollClass).scroll(function() {			var scrollLeft = parseInt($(this).scrollLeft());			var pos = $(sel + ":eq(0)").position();			var left = parseInt($(sel + ":eq(0)").css("left"));                        var setleft = left + (parseInt(cur.origin_pos.left) - pos.left);            //console.log(setleft);            if(setleft < -1){                $(sel).css({                    "left": setleft + 'px',                    "border-left" : cur.options.borderLeft,                    "border-right" : cur.options.borderLeft                });            }else{                $(sel).css({                    "left": "0px",                    "border-left" : "none",                    "border-right" : "none"                });            }		});    },    bindMouseWheel:function(){        var cur = this;		$(this.options.wrapClass + " " + this.options.scrollClass).mousewheel(function(event, delta, deltaX, deltaY) {			//console.log(event,delta,deltaY,deltaY);			var curpos = $(this).scrollLeft();			var setv = 0;			if (delta > 0) {				//up				setv = (curpos - cur.options.wheelStep) < 0 ? 0: (curpos - cur.options.wheelStep);			} else {				//down				setv = (curpos + cur.options.wheelStep) >= cur.maxScollLeft ? cur.maxScollLeft : (curpos + cur.options.wheelStep);			}            //console.log(setv);			$(this).scrollLeft(setv);			event.preventDefault();			event.stopPropagation();		});    },    resize:function(){		var sel = this.options.wrapClass + " " + this.options.fixableClass;        $(sel).css({            "left": "0px",            "border-left" : "none",            "border-right" : "none"        });            $(this.options.wrapClass + " " + this.options.scrollClass).unbind();        this.init();    }}