//-------数学函数------//

function PI(){
    return Math.PI;
}

function sin(x){
    return Math.sin(x);
}

function cos(x){
    return Math.cos(x);
}

function abs(x){
    return Math.abs(x);
}

function floor(x){
    return Math.floor(x);
}

function round(x){
    return Math.round(x);
}

function tail(x){
    return x-floor(x);
}

function rem(x,w){  //广义求余
    return tail(x/w)*w;
}

function nnr(x,w){  //非负余数
    if(x<0){
        x+=(-x*w);
    }
    return x%w;
}

//---------公历--------//

//判断Gregorian历还是Julian历
function ifGr(y,m,d,calType){  //阳历y年m月(1,2,..,12,下同)d日,calType=1,2,3分别表示标准日历,Gregorge历和Julian历，下同，其中所谓“标准日历是指：1582-10-4之前采用Julian，1582-10-15以后采用Gregorian，1582-10-5 ~ 1582-10-14为空”

    switch(calType){
        case 1:
            if(y>1582||(y==1582&&m>10)||(y==1582&&m==10&&d>14))
                return 1;  //Gregorian
            else
            if(y==1582&&m==10&&d>=5&&d<=14)
                return -1;  //空
            else
                return 0;  //Julian
            break;

        case 2:
            return 1;  //Gregorian
            break;

        case 3:
            return 0;  //Julian
            break;
    }

}

//日差天数
function D0(y,m,d,calType){
    var ifG=ifGr(y,m,d,calType);
    var monL=new Array(0,31,28,31,30,31,30,31,31,30,31,30,31);

    if(ifG==-1){
        return Infinity;
    }

    if(ifG==1){
        if((y%100!=0&&y%4==0)||(y%400==0)){
            monL[2]+=1;
        }
        else ;
    }
    else{
        if(y%4==0){
            monL[2]+=1;
        }
        else ;
    }

    var v=0;
    for(var i=0;i<=m-1;i++){
        v+=monL[i];
    }
    v+=d;

    return v;
}

//反日差天数
function revD0(y,x,calType){  // y年日差天数D0为x
    var j,m,mL;

    for(j=1;j<=12;j++){
        mL=D0(y,j+1,1,calType)-D0(y,j,1,calType);

        if(x<=mL||j==12){
            m=j;
            break;
        }
        else{
            x-=mL;
        }

    }

    if((calType==1)&&(y==1582&&m==10&&x>=5&&x<=14)){
        return Infinity;
    }

    return 100*m+x;
}

//年差天数
function D(y,calType){
    v=(y-1)*365+floor((y-1)/4);  //Julian的年差天数
    if(ifGr(y,12,1,calType)==1)
        v+=-floor((y-1)/100)+floor((y-1)/400);  //Gregorian的年差天数
    return v;
}

//标准天数(Standard Days)(y年m月d日距该历制的1年1月0日的天数)
function SD(y,m,d,calType){
    if(ifGr(y,m,d,calType)==-1)
        return Infinity;

    if(ifGr(y,m,d,calType)==1)
        return (y-1)*365+floor((y-1)/4)-floor((y-1)/100)+floor((y-1)/400)+D0(y,m,d,calType);   //Gregorian的标准天数

    else
        return (y-1)*365+floor((y-1)/4)+D0(y,m,d,calType);                                     //Julian的标准天数

}

//等效标准天数(Equivalent Standard Days)(y年m月d日距该历制的1年1月0日的天数)
function ESD(y,m,d,calType){
    if(ifGr(y,m,d,calType)==-1)
        return Infinity;

    if(ifGr(y,m,d,calType)==1)
        return SD(y,m,d,calType);   //Gregorian的标准天数

    else
        return SD(y,m,d,calType)-2;   //Julian的标准天数

}

//儒略日
function JD(y,m,d,h,min,sec,zone,calType){
    var ifG=ifGr(y,m,d,calType);
    var jt=(h+(min+sec/60)/60)/24-0.5-zone/24;
    var jd=(ifG)?(SD(y,m,d,calType)+1721425+jt):(SD(y,m,d,calType)+1721423+jt);//儒略日

    return jd;
}

//反标准天数
function revSD(x,calType,ifG){  //当calType==1且x==577736或x<=577737时，ifG才起作用，ifG=1表示返回的是标准日历的10-15和10-16日（是Gregorian），ifG=0表示返回的是标准日历的10-3和10-4日（是Julian）

    var u0=floor(x/365.25)+1;  //试探一个最小估计的年份值

    var u0D0=x-D(u0,calType);  //x的日差天数

    if((calType==1&&ifG==0)&&(x>=577461&&x<=577737)){
        u0D0-=12;
    }

    var u0L=D0(u0,12,31,calType);  //u0年的长度

    if(u0D0>u0L){
        u0D0-=u0L;
        u0++;
    }

    return u0*10000+revD0(u0,u0D0,calType);
}

//反儒略日
function revJD(x,zone,calType){

    var jt=tail(x)+0.5+zone/24;
    var ymd,h,min,sec;

    var x0=x;  //备份x

    x=floor(x);

    if(jt>=1){
        jt-=1;
        x++;
    }

    h=floor(jt*24);
    min=floor(tail(jt*24-h)*60);
    sec=floor(tail(jt*24*60-h*60-min)*60);

    if(calType==2){
        ymd=revSD(x-1721425,calType,1);
    }

    if(calType==3){
        ymd=revSD(x-1721423,calType,1);
    }

    if(calType==1){
        if(x0<2299160.5-zone/24){
            ymd=revSD(x-1721423,calType,0);
        }
        else{
            ymd=revSD(x-1721425,calType,1);
        }
    }

    return ymd*1000000+h*10000+min*100+sec;
}

//======儒略历与格里历相互转化的函数======
//儒略历转换成格里历
function Ju2Gr(y,m,d){
    return floor(revJD(JD(y,m,d,12,0,0,0,3),0,2)/1000000);
}

//格里历转换成儒略历
function Gr2Ju(y,m,d){
    return floor(revJD(JD(y,m,d,12,0,0,0,2),0,3)/1000000);
}

//儒略历转换成标准历
function Ju2No(y,m,d){
    return floor(revJD(JD(y,m,d,12,0,0,0,3),0,1)/1000000);
}

//标准历转换成儒略历
function No2Ju(y,m,d){
    return floor(revJD(JD(y,m,d,12,0,0,0,1),0,3)/1000000);
}

//格里历转换成标准历
function Gr2No(y,m,d){
    return floor(revJD(JD(y,m,d,12,0,0,0,2),0,1)/1000000);
}

//标准历转换成格里历
function No2Gr(y,m,d){
    return floor(revJD(JD(y,m,d,12,0,0,0,1),0,2)/1000000);
}



//星期
function Day(y,m,d,calType){
    return nnr(ESD(y,m,d,calType),7);
}

//星座
function sZod(m,d){
    var zodd=new Array(1222,122,222,321,421,522,622,722,822,922,1022,1122,1222);
    if((100*m+d)>=zodd[0]||(100*m+d)<zodd[1])
        var i=0;
    else
        for(var i=1;i<12;i++){
            if((100*m+d)>=zodd[i]&&(100*m+d)<zodd[i+1])
                break;
        }
    return i;
}

//节气函数
function S(y,n,pd,calType){  //pd取值为0或1，分别表示平气和定气,该函数返回节气的D0值
    var juD=y*(365.2423112-6.4e-14*(y-100)*(y-100)-3.047e-8*(y-100))+15.218427*n+1721050.71301;//儒略日
    var tht=3e-4*y-0.372781384-0.2617913325*n;//角度
    var yrD=(1.945*sin(tht)-0.01206*sin(2*tht))*(1.048994-2.583e-5*y);//年差实均数
    var shuoD=-18e-4*sin(2.313908653*y-0.439822951-3.0443*n);//朔差实均数
    var vs=(pd)?(juD+yrD+shuoD-ESD(y,1,0,calType)-1721425):(juD-ESD(y,1,0,calType)-1721425);
    return vs;
}

//天干
function gan(x){
    return x%10;
}

//地支
function zhi(x){
    return x%12;
}

//年干支
function yGz(y,m,d,h,calType){
    if((D0(y,m,d,calType)+h/24)<S(y,3,1,calType)-1)  //判断是否过立春
        y-=1;
    return round(rem(y-3-1,60)+1);
}

//月干支
function mGz(y,m,d,h,calType){

    var sN0=2*m-2;
    var sDt0=S(y,sN0,1,calType);
    var sD0=revD0(y,floor(sDt0),calType);
    var sM0=floor(sD0/100);
    var sDate0=sD0%100+tail(sDt0);

    var sN1=2*m-1;
    var sDt1=S(y,sN1,1,calType);
    var sD1=revD0(y,floor(sDt1),calType);
    var sM1=floor(sD1/100);
    var  sDate1=sD1%100+tail(sDt1);

    var sN2=2*m;
    var sDt2=S(y,sN2,1,calType);
    var sD2=revD0(y,floor(sDt2),calType);
    var sM2=floor(sD2/100);
    var  sDate2=sD2%100+tail(sDt2);

    var sN3=2*m+1;
    if(sN3>24)
        sN3-=24;
    var sDt3=S(y,sN3,1,calType);
    var sD3=revD0(y,floor(sDt3));
    var sM3=floor(sD3/100);
    var  sDate3=sD3%100+tail(sDt3);

    if(sM0==m){
        sN2=sN1; sN1=sN0;
        sDt2=sDt1; sDt1=sDt0;
        sDate2=sDate1; sDate1=sDate0;
    }

    if(sM3==m){
        sN1=sN2; sN2=sN3;
        sDt1=sDt2; sDt2=sDt3;
        sDate1=sDate2; sDate2=sDate3;
    }

    sN1=rem(sN1-1,24)+1;
    sN2=rem(sN2-1,24)+1;

    var mL=D0(y,m,31,calType)-D0(y,m,0,calType);
    if(sDate2>mL)
        sDate2-=mL;

    var jqDate=(sN1%2==1)?sDate1:sDate2;  //"节气"(n为奇数)所在的阳历日数

    var gzM=((d+h/24)<jqDate)?(m-2):(m-1);   //干支月
    if(gzM<=0)
        gzM+=12;
    return round(rem(12*gan(yGz(y,m,d,h,calType))+gzM-10-1,60)+1);
}

//日干支
function dGz(y,m,d,h,calType){
    var gzD=(h<23)?ESD(y,m,d,calType):ESD(y,m,d,calType)+1;
    return round(rem(gzD+15-1,60)+1);
}

//时干支
function hGz(y,m,d,h,calType){
    var v=12*gan(dGz(y,m,d,h,calType))+floor((h+1)/2)-11;
    if(h==23)
        v-=12;
    return round(rem(v-1,60)+1);
}

//甲子纳音
function GZNY(gz){
    var s=new Array(
        '海中金',
        '炉中火',
        '大林木',
        '路旁土',
        '剑锋金',
        '山头火',
        '洞下水',
        '城墙土',
        '白腊金',
        '杨柳木',
        '泉中水',
        '屋上土',
        '霹雷火',
        '松柏木',
        '常流水',
        '沙中金',
        '山下火',
        '平地木',
        '壁上土',
        '金箔金',
        '佛灯火',
        '天河水',
        '大驿土',
        '钗钏金',
        '桑松木',
        '大溪水',
        '沙中土',
        '天上火',
        '石榴木',
        '大海水'
    );

    return s[floor((gz-1)/2)];
}

//二十八宿
function stars28(y,m,d,calType){
    var v=ESD(y,m,d,calType);
    return round(rem(v-4-1,28)+1);
}

//----------------------------------农历闰月信息------------------------------------------
var leapNumber=new Array(0,1,1,1,2,2,2,3,3,3,4,4,5,5,5,6,6,6,7,7,8,8,8,9,9,9,10,10,10,11,11,12,12,12,13,13,13,14,14,15,15,15,16,16,16,17,17,17,18,18,19,19,19,20,20,20,21,21,22,22,22,23,23,23,24,24,24,25,25,26,26,26,27,27,27,28,28,29,29,29,30,30,30,31,31,31,32,32,33,33,33,34,34,34,35,35,36,36,36,37,37,37,38,38,38,39,39,40,40,40,41,41,41,42,42,43,43,43,44,44,44,45,45,46,46,46,47,47,47,48,48,48,49,49,50,50,50,51,51,52,52,52,53,53,53,54,54,54,55,55,56,56,56,56,57,57,57,58,58,59,59,59,59,60,60,61,61,62,62,63,63,64,64,64,64,65,65,65,65,66,66,66,67,67,68,68,69,69,69,69,70,71,71,71,71,71,71,72,72,73,73,74,74,74,75,75,75,75,76,76,77,77,77,77,78,79,79,79,79,79,80,80,80,81,82,82,82,83,83,84,84,84,85,85,85,86,86,86,86,87,87,87,87,88,88,89,89,90,90,91,91,91,92,92,93,93,94,94,94,94,95,95,96,96,96,96,97,97,98,98,98,99,99,100,100,100,101,101,101,102,102,102,103,103,104,104,104,105,105,105,106,106,106,107,107,107,108,108,109,109,109,110,110,111,111,111,112,112,112,113,113,114,114,114,115,115,116,116,116,117,117,117,117,118,118,119,119,119,120,120,121,121,121,122,122,122,123,123,124,124,124,124,125,125,126,126,126,126,127,127,128,128,129,129,130,130,130,130,131,131,132,132,132,133,133,133,134,134,135,135,135,136,136,136,137,137,137,138,138,139,139,139,140,140,141,141,141,142,142,142,143,143,143,144,144,144,145,145,146,146,146,147,147,147,148,148,149,149,149,150,150,150,151,151,151,152,152,153,153,153,154,154,154,155,155,156,156,156,157,157,157,158,158,158,159,159,160,160,160,161,161,161,162,162,163,163,163,164,164,164,165,165,165,166,166,167,167,167,168,168,168,169,169,170,170,170,171,171,171,172,172,172,173,173,174,174,174,175,175,175,176,176,177,177,177,178,178,178,179,179,179,180,180,181,181,181,182,182,182,183,183,184,184,184,185,185,185,186,186,186,187,187,188,188,188,189,189,189,190,190,191,191,191,192,192,192,193,193,193,194,194,195,195,195,196,196,196,197,197,198,198,198,199,199,199,200,200,200,201,201,202,202,202,203,203,203,204,204,205,205,205,206,206,206,207,207,207,208,208,209,209,209,210,210,210,211,211,212,212,212,213,213,213,214,214,214,214,214,215,215,215,216,216,216,217,217,218,218,218,219,219,219,220,220,221,221,221,222,222,222,223,223,223,224,224,225,225,225,226,226,226,227,227,228,228,228,229,229,229,230,230,230,231,231,232,232,232,233,233,233,234,234,235,235,235,236,236,236,237,237,237,238,238,239,239,239,240,240,240,241,241,242,242,242,243,243,243,244,244,244,245,245,246,246,246,247,247,247,248,248,249,249,249,250,250,250,251,251,252,252,252,253,253,253,254,254,254,255,255,256,256,256,257,257,257,258,258,259,259,259,260,260,260,261,261,261,262,262,263,263,263,264,264,264,265,265,266,266,266,267,267,267,268,268,268,269,269,270,270,270,271,271,271,272,272,273,273,273,274,274,274,275,275,276,276,276,277,277,277,278,278,278,279,279,280,280,280,281,281,281,282,282,283,283,283,284,284,284,285,285,285,286,286,287,287,287,288,288,288,289,289,290,290,290,291,291,291,292,292,292,293,293,294,294,294,295,295,295,296,296,297,297,297,298,298,298,299,299,299,300,300,301,301,301,302,302,302,303,303,304,304,304,305,305,305,306,306,306,307,307,308,308,308,309,309,309,310,310,311,311,312,312,312,313,313,313,314,314,315,315,315,316,316,316,317,317,317,318,318,319,319,319,320,320,320,321,321,322,322,322,323,323,323,324,324,325,325,325,326,326,326,327,327,327,328,328,329,329,329,330,330,330,331,331,332,332,332,333,333,333,334,334,334,335,335,336,336,336,337,337,337,338,338,339,339,339,340,340,340,341,341,341,342,342,343,343,343,344,344,344,345,345,346,346,346,347,347,347,348,348,348,349,349,350,350,350,351,351,351,352,352,353,353,353,354,354,354,355,355,355,356,356,357,357,357,358,358,358,359,359,360,360,360,361,361,361,362,362,362,363,363,364,364,364,365,365,365,366,366,367,367,367,368,368,368,369,369,369,370,370,371,371,371,372,372,372,373,373,374,374,374,375,375,375,376,376,376,377,377,378,378,378,379,379,379,380,380,381,381,381,382,382,382,383,383,383,384,384,385,385,385,386,386,386,387,387,388,388,388,389,389,389,390,390,390,391,391,392,392,392,393,393,393,394,394,395,395,395,396,396,396,397,397,397,398,398,399,399,399,400,400,400,401,401,402,402,402,403,403,403,404,404,404,405,405,406,406,406,407,407,407,408,408,409,409,409,410,410,410,411,411,411,412,412,413,413,413,414,414,414,415,415,416,416,416,417,417,417,418,418,418,419,419,420,420,420,421,421,421,422,422,423,423,423,424,424,424,425,425,425,426,426,427,427,427,428,428,428,429,429,430,430,430,431,431,431,432,432,432,433,433,434,434,434,435,435,435,436,436,437,437,437,438,438,438,439,439,439,440,440,441,441,441,442,442,442,443,443,444,444,444,445,445,445,446,446,446,447,447,448,448,448,449,449,449,450,450,451,451,451,452,452,452,453,453,453,454,454,455,455,455,456,456,456,457,457,458,458,458,459,459,459,460,460,460,461,461,462,462,462,463,463,463,464,464,465,465,465,466,466,466,467,467,467,468,468,469,469,469,470,470,470,471,471,472,472,472,473,473,473,474,474,474,475,475,475,476,476,477,477,477,478,478,478,479,479,480,480,480,481,481,481,482,482,482,483,483,484,484,484,485,485,485,486,486,487,487,487,488,488,488,489,489,489,490,490,491,491,491,492,492,492,493,493,494,494,494,495,495,495,496,496,496,497,497,498,498,498,499,499,499,500,500,501,501,501,502,502,502,503,503,503,504,504,505,505,505,506,506,506,507,507,508,508,508,509,509,509,510,510,510,511,511,512,512,512,513,513,513,514,514,515,515,515,516,516,516,517,517,517,518,518,519,519,519,520,520,520,521,521,522,522,522,523,523,523,524,524,524,525,525,526,526,526,527,527,527,528,528,529,529,529,530,530,530,531,531,531,532,532,533,533,533,534,534,534,535,535,536,536,536,537,537,537,538,538,538,539,539,540,540,540,541,541,541,542,542,543,543,543,544,544,544,545,545,545,546,546,547,547,547,548,548,548,549,549,550,550,550,551,551,551,552,552,552,553,553,554,554,554,555,555,555,556,556,557,557,557,558,558,558,559,559,559,560,560,561,561,561,562,562,562,563,563,563,564,564,565,565,565,566,566,566,567,567,568,568,568,569,569,569,570,570,570,571,571,572,572,572,573,573,573,574,574,575,575,575,576,576,576,577,577,578,578,578,579,579,579,580,580,580,581,581,582,582,582,583,583,583,584,584,584,585,585,586,586,586,587,587,587,588,588,589,589,589,590,590,590,591,591,591,592,592,593,593,593,594,594,594,595,595,596,596,596,597,597,597,598,598,598,599,599,600,600,600,601,601,601,602,602,603,603,603,604,604,604,605,605,605,606,606,607,607,607,608,608,608,609,609,610,610,610,611,611,611,612,612,612,613,613,614,614,614,615,615,615,616,616,617,617,617,618,618,618,619,619,619,620,620,621,621,621,622,622,622,623,623,624,624,624,625,625,625,626,626,626,627,627,628,628,628,629,629,629,630,630,631,631,631,632,632,632,633,633,633,634,634,635,635,635,636,636,636,637,637,638,638,638,639,639,639,640,640,640,641,641,642,642,642,643,643,643,644,644,645,645,645,646,646,646,647,647,647,648,648,649,649,649,650,650,650,651,651,652,652,652,653,653,653,654,654,654,655,655,656,656,656,657,657,657,658,658,659,659,659,660,660,660,661,661,661,662,662,663,663,663,664,664,664,665,665,666,666,666,667,667,667,668,668,668,669,669,670,670,670,671,671,671,672,672,673,673,673,674,674,674,675,675,675,676,676,677,677,677,678,678,678,679,679,680,680,680,681,681,681,682,682,682,683,683,684,684,684,685,685,685,686,686,687,687,687,688,688,688,689,689,689,690,690,691,691,691,692,692,692,693,693,694,694,694,695,695,695,696,696,696,697,697,698,698,698,699,699,699,700,700,701,701,701,702,702,702,703,703,703,704,704,705,705,705,706,706,706,707,707,707,708,708,709,709,709,710,710,710,711,711,712,712,712,713,713,713,714,714,714,715,715,716,716,716,717,717,717,718,718,719,719,719,720,720,720,721,721,721,722,722,723,723,723,724,724,724,725,725,726,726,726,727,727,727,728,728,728,729,729,730,730,730,731,731,731,732,732,733,733,733,734,734,734,735,735,736,736,736,737,737,737,738,738,738,739,739,740,740,740,741,741,741,742,742,742,743,743,744,744,744,745,745,745,746,746,747,747,747,748,748,748,749,749,749,750,750,751,751,751,752,752,752,754,754,755,755,755,756,756,756,757,757,757,758,758,759,759,759,760,760,760,761,761,762,762,762,763,763,763,764,764,764,765,765,766,766,766,767,767,767,768,768,769,769,769,770,770,770,771,771,771,772,772,773,773,773,774,774,774,775,775,776,776,776,777,777,777,778,778,778,779,779,780,780,780,781,781,781,782,782,783,783,783,784,784,784,785,785,785,786,786,787,787,787,788,788,788,789,789,790,790,790,791,791,791,792,792,792,793,793,794,794,794,795,795,795,796,796,796,797,797,798,798,798,799,799,799,800,800,801,801,801,802,802,802,803,803,804,804,804,805,805,805,806,806,806,807,807,808,808,808,809,809,809,810,810,810,811,811,812,812,812,813,813,813,814,814,815,815,815,816,816,816,817,817,818,818,818,819,819,819,820,820,820,821,821,822,822,822,823,823,823,824,824,825,825,825,826,826,826,827,827,827,828,828,829,829,829,830,830,830,831,831,832,832,832,833,833,833,834,834,834,835,835,836,836,836,837,837,837,838,838,839,839,839,840,840,840,841,841,841,842,842,843,843,843,844,844,844,845,845,845,846,846,847,847,847,848,848,848,849,849,850,850,850,851,851,851,852,852,852,853,853,854,854,854,855,855,855,856,856,857,857,857,858,858,858,859,859,859,860,860,861,861,861,862,862,862,863,863,864,864,863,864,864,864,865,865,865,866,866,867,867,867,868,868,868,869,869,870,870,870,871,871,871,872,872,873,873,873,874,874,874,875,875,875,876,876,877,877,877,878,878,878,879,879,879,880,880,881,881,881,882,882,882,883,883,884,884,884,885,885,885,886,886,886,887,887,888,888,888,889,889,889,890,890,891,891,891,892,892,892,893,893,893,894,894,895,895,895,896,896,896,897,897,898,898,898,899,899,899,900,900,900,901,901,902,902,902,903,903,903,904,904,905,905,905,906,906,906,907,907,907,908,908,909,909,909,910,910,910,911,911,912,912,912,913,913,913,914,914,914,915,915,916,916,916,917,917,917,918,918,919,919,919,920,920,920,921,921,921,922,922,923,923,923,924,924,924,925,925,925,926,926,927,927,927,928,928,928,929,929,930,930,930,931,931,931,932,932,932,933,933,934,934,934,935,935,935,936,936,937,937,937,938,938,938,939,939,939,940,940,941,941,941,942,942,942,943,943,944,944,944,945,945,945,946,946,946,947,947,948,948,948,949,949,949,950,950,951,951,951,952,952,952,953,953,953,954,954,955,955,955,956,956,956,957,957,958,958,958,959,959,959,960,960,960,961,961,962,962,962,963,963,963,964,964,965,965,965,966,966,966,967,967,967,968,968,969,969,969,970,970,970,971,971,971,972,972,973,973,973,974,974,974,975,975,976,976,976,977,977,977,978,978,978,979,979,980,980,980,981,981,981,982,982,983,983,983,984,984,984,985,985,986,986,986,987,987,987,988,988,988,989,989,990,990,990,991,991,991,992,992,993,993,993,994,994,994,995,995,995,996,996,997,997,997,998,998,998,999,999,1000,1000,1000,1001,1001,1001,1002,1002,1002,1003,1003,1004,1004,1004,1005,1005,1005,1006,1006,1006,1007,1007,1008,1008,1008,1009,1009,1009,1010,1010,1011,1011,1011,1012,1012,1012,1013,1013,1013,1014,1014,1015,1015,1015,1016,1016,1016,1017,1017,1018,1018,1018,1019,1019,1019,1020,1020,1020,1021,1021,1022,1022,1022,1023,1023,1023,1024,1024,1025,1025,1025,1026,1026,1026,1027,1027,1027,1028,1028,1029,1029,1029,1030,1030,1030,1031,1031,1032,1032,1032,1033,1033,1033,1034,1034,1034,1035,1035,1036,1036,1036,1037,1037,1037,1038,1038,1039,1039,1039,1040,1040,1040,1041,1041,1042,1042,1042,1043,1043,1043,1044,1044,1044,1045,1045,1046,1046,1046,1047,1047,1047,1048,1048,1048,1049,1049,1050,1050,1050,1051,1051,1051,1052,1052,1053,1053,1053,1054,1054,1054,1055,1055,1055,1056,1056,1057,1057,1057,1058,1058,1058,1059,1059,1060,1060,1060,1061,1061,1061,1062,1062,1062,1063,1063,1064,1064,1064,1065,1065,1065,1066,1066,1067,1067,1067,1068,1068,1068,1069,1069,1069,1070,1070,1071,1071,1071,1072,1072,1072,1073,1073,1074,1074,1074,1075,1075,1075,1076,1076,1076,1077,1077,1078,1078,1078,1079,1079,1079,1080,1080,1081,1081,1081,1082,1082,1082,1083,1083,1083,1084,1084);

function leapNum(y){
    if(y<0)
        return leapNumber[y+849];
    else
        return leapNumber[y-1+849];
}

function leapMon(y){
    var starY=-849;  //记录从公元前850年开始
    var leapM='0c0080050010a0070030c0080050010a0070030c0080050020a0070030c0080050020a0070030c0090050020a0070030c0090050020a0060030c0060030c00900600c0c0060c00c00c00c0c000600c0c0006090303030006000c00c060c0006c00000c0c0c0060003030006c00009009c0090c00c009000300030906030030c0c00060c00090c0060600c0030060c00c003006009060030c0060060c0090900c00090c0090c00c006030006060003030c0c00030c0060030c0090060030c0090300c0080050020a0060030c0080050020b0070030c0090050010a0070030b0090060020a0070040c0080050020a0060030c0080050020b0070030c0090050010a0070030b0090060020a0070040c0080050020a0060030c0080050020b0070030c0090050000c00900909009009090090090090900900909009009009090090090900900900909009009090090090090900900909009009090090090090900900909009009009090090090900900900909009009090060030c0090050010a0070030b008005001090070040c0080050020a0060030c0090040010a0060030c0090050010a0070030b0080050010a008005001090050020a0060030c0080040010a0060030c0090050010a0070030b0080050010a0070030b008005001090070040c0080050020a0060030c0080040010a0060030c0090050010a0070030b008005001090070040c0080050020a0060030c0080040010a0060030c0090050010a0060030c0090050010a0070030b008005001090070040c0080050020a0060030c0080040010a0070030b0080050010a0070040c0080050020a0060030c0080040010a0070030c0090050010a0070030b0080050020a0060030c0080040010a0060030c0090050050020a0060030c0090050010b0070030c0090050010a0070040c0080040020a0060030c0080050020a0060030c0090050010a0070030b0080040020a0060040c0090050020b0070030c00a0050010a0070030b0090050020a0070030c0080040020a0060030c0090050010a0070030c0090050030b007005001090050020a007004001090060020c0070050c0090060030b0080040020a0060030b0080040010a0060030b0080050010a0050040c0080050010a0060030c0080050010b0070030c007005001090070030b0070040020a0060030c0080040020a0070030b0090050010a0060040c0080050020a0060040c0080050010b0070030c007005001090070030c0080050020a0070030c0090050020a0070030c0090050020a0060040c0090050020a0060040c0090050010b0070030c0080050030b007004001090060020c008004002090060020a008004001090050030b0080040020a0060040b0080040c00a0060020b007005001090060030b0070050020a0060020c008004002090070030c008005002090070040c0080040020a0060040b0090050010a0060030b0080050020a0060040c0080050010b00700300108005001090070030c0080050020a007003001090050030a0070030b0090050020a0060040c0090050030b0070040c0090050010c0070040c0080060020b00700400a090060020b007003002090060020a005004001090050030b007004001090050040c0080040c00a0060020c007005001090060030b0070050020a0060020c008004002090060030b008004002090060030b0080040020a0060040b0080040010b0060030b0070050010a00600400207005003080060040030700500307006004003070050030800600400307005004090060040030700500409006005002070050030a0060050030700500400206004002060050030020600400307005004090060040030700500408007005003080050040a00600500307005004002060050030800500400206005002070050040020600500307006004002070050030800600400307005004080060040a006005003080050040020700500409006004002060050030b0060050020700500308006004003070050040800600400307005004080060040020';//-849-2100
    var v=leapM.charAt(y-starY);

    if(v=='a')
        v=10;
    if(v=='b')
        v=11;
    if(v=='c')
        v=12;
    return parseInt(v);
}
//----------------------------------------------------------------------------------------

//------农历及日月食------//
//角度函数
function ang(x,t,c1,t0,t2,t3){
    return tail(c1*x)*2*PI()+t0-t2*t*t-t3*t*t*t;
}

//返回农历日数及日月食信息的函数，如-324.57923415，负号表示闰月，百位3表示月偏食(2为月全食,1为日食0为无食),百位及十位表示日数,小数部分是朔望时刻(单位为天,若该天不朔或望则小数部分为零)

function lunDate(y,m,d,calType){
    var t=(y-1899.5)/100;
    var ms=floor((y-1900)*12.3685);
    var rpi=180/PI();
    var zone=8;  //时区
    var f0=ang(ms,t,0,0.75933,2.172e-4,1.55e-7)+0.53058868*ms-8.37e-4*t+zone/24+0.5;
    var fc=0.1734-3.93e-4*t;
    var j0=693595+29*ms;
    var aa0=ang(ms,t,0.08084821133,359.2242/rpi,0.0000333/rpi,0.00000347/rpi);
    var ab0=ang(ms,t,7.171366127999999e-2,306.0253/rpi,-0.0107306/rpi,-0.00001236/rpi);
    var ac0=ang(ms,t,0.08519585128,21.2964/rpi,0.0016528/rpi,0.00000239/rpi);
    var leap=0;  //闰月数,0则不闰
    var ecli=0;  //日月食
    var lunD=-1;  //农历日数
    var shuoD=0;  //本阴历月的阴历朔日数
    var shuoT=0;  //本阴历月的朔时刻
    var wangD=0;  //本阴历月的阴历望日数
    var wangT=0;  //本阴历月的望时刻

    for(var k=-1;k<=13;k+=0.5){  //k=整数为朔,k=半整数为望
        var aa=aa0+0.507984293*k;
        var ab=ab0+6.73377553*k;
        var ac=ac0+6.818486628*k;
        var f1=f0+1.53058868*k+fc*sin(aa)-0.4068*sin(ab)+0.0021*sin(2*aa)+0.0161*sin(2*ab)+0.0104*sin(2*ac)-0.0074*sin(aa-ab)-0.0051*sin(aa+ab);
        var j=j0+28*k+f1;  //朔或望的等效标准天数及时刻

        //记录当前日期的j值
        var lunD0=ESD(y,m,d,calType)-floor(j);  //当前日距朔日的差值
        if(k==floor(k)&&lunD0>=0&&lunD0<=29){
            var k1=k;  //记录当前时间对应的k值
            shuoT=tail(j);
            lunD=lunD0+1;
        }
        if(k==(k1+0.5)){
            wangT=tail(j);
            wangD=floor(j)-(ESD(y,m,d,calType)-lunD+1)+1;
        }

        //判断日月食
        if((lunD==1&&k==k1)||(lunD==wangD&&k==(k1+0.5))){
            if(abs(sin(ac))<=0.36){
                var s=5.19595-0.0048*cos(aa)+0.002*cos(2*aa)-0.3283*cos(ab)-0.006*cos(aa+ab)+0.0041*cos(aa-ab);
                var r=0.207*sin(aa)+0.0024*sin(2*aa)-0.039*sin(ab)+0.0115*sin(2*ab)-0.0073*sin(aa+ab)-0.0067*sin(aa-ab)+0.0117*sin(2*ac);
                var p=abs(s*sin(ac)+r*cos(ac));
                var q=0.0059+0.0046*cos(aa)-0.0182*cos(ab)+0.0004*cos(2*ab)-0.0005*cos(aa+ab);
                if(p-q<=1.5572){
                    ecli=1;  //日食
                    if(k!=floor(k)){
                        if(p+q>=1.0129)
                            ecli=3;  //月偏食
                        else
                            ecli=2;  //月全食
                    }
                }
            }
        }
    }
//k循环结束

//  var v=lunD;  //返回值
//  if(v==1)
//    v+=shuoT  //朔日则返回朔的时刻
//  if(v==wangD)
//    v+=wangT;  //望日则返回望的时刻

    //return(v+ecli*100)



    //下面是对现行农历的校正（1901-2050）,由波波网友指出

    //1924.3.5-4.3 少一天
    if(y==1924&&((m==3&&d>=5)||(m==4&&d<=3))){
        lunD++;
        if(lunD>30){
            lunD-=30;
        }
    }

    //2018.11.7-12.6 多一天
    if(y==2018&&((m==11&&d>=7)||(m==12&&d<=6))){
        lunD--;
        if(lunD<1){
            lunD+=30;
        }
    }
    //2025.4.27-5.26 少一天
    if(y==2025&&((m==4&&d>=7)||(m==5&&d<=26))){
        lunD++;
        if(lunD>30){
            lunD-=30;
        }
    }

    ////////////////////////////////////////////////////

    this.date=lunD;       //阴历日期

    if(lunD==1){
        this.syzygyType='newMoon';  //朔
        this.syzygyTime=shuoT;      //朔的时刻
    }
    else if(lunD==wangD){
        this.syzygyType='fullMoon';  //望
        this.syzygyTime=wangT;	 //望的时刻
    }
    else{
        this.syzygyType='none';
        this.syzygyTime=-1;
    }

    this.ecliType=ecli;   //日月食类型
    this.ecliTime=this.syzygyTime;

}


function lunMon(y,m,d,calType){
    var lunDt=(new lunDate(y,m,d,calType)).date;
    var lunD=floor(lunDt-floor(lunDt/100)*100);  //农历日数
    var leapN=0;  //从当年到-849年的总闰月数
    leapN=leapNum(y);
    var MonN=round((ESD(y,m,d,calType)-ESD(-849,1,21,calType)-lunD)/29.530588)-leapN;  //从当年到-849年的有效总月数(扣除闰月)

    if(y<=240) MonN++;
    if(y<=237) MonN--;
    if(y<24) MonN++;
    if(y<9) MonN--;
    if(y<=-255) MonN++;
    if(y<=-256) MonN+=2;
    if(y<=-722) MonN++;  //历史上的修改月建


    var lunM=round(rem(MonN-3,12)+1);
    if(lunM==leapMon(y-1)&&m==1&&d<lunD){
        lunM*=-1;    //如果y-1年末是闰月且该月接到了y年,则y年年初也是闰月
    }
    else{
        if(lunM==leapMon(y)){
            if(m==1&&leapMon(y)!=12){
                lunM++;  //比如1984年有闰10月，而1984-1-1的lunM=10，但这是从1983年阴历接过来的，所以不是1984年的闰10月
            }

            else{
                lunM*=-1;
            }
            //alert();
        }
        else{
            if(lunM<leapMon(y)||m<lunM&&leapMon(y))
                lunM++;  //如果y年是闰月但当月未过闰月则前面多扣除了本年的闰月，这里应当补偿
            lunM=round(rem(lunM-1,12)+1);
        }
    }
//alert(lunM);


    //下面是对现行农历的校正（1901-2050）,由波波网友指出

    //1924.3.5-4.3 少一天
    if(y==1924&&((m==3&&d==5))){
        lunM++;
    }

    //2018.11.7-12.6 多一天
    if(y==2018&&((m==11&&d==7))){
        lunM--;
    }
    //2025.4.27-5.26 少一天
    if(y==2025&&((m==4&&d==27))){
        lunM++;
    }



    ////////////////////////////////////////////////////


    return lunM;
}



function lunarCal(y,m,d,calType){
    this.dateInfo=new lunDate(y,m,d,calType);
    this.date=this.dateInfo.date;
    this.syzygyType=this.dateInfo.syzygyType;
    this.syzygyTime=this.dateInfo.syzygyTime;
    this.ecliType=this.dateInfo.ecliType;
    this.ecliTime=this.dateInfo.ecliTime;
    this.month=lunMon(y,m,d,calType);
}

//alert(new lunarCal(1582,10,3,1).month)

//--------转换成字符串的函数--------//

//将单位天的纯小数转换成如同5:08的时间格式
function dToStr(dv){
    var h=floor(dv*24);
    var min=floor((dv*24-h)*60);
    if(h<10){
        h='0'+h;
    }
    if(min<10){
        min='0'+min;
    }
    return h+':'+min;
}

//公元年份
function yearStr(v){
    if(v<=0){
        return '前'+(-v+1);
    }
    else{
        return v;
    }
}

//星期
function dayStr(v){
    return '日一二三四五六'.charAt(v%7);
}

function dayENStr(v){
    var s=new Array('SUNDAY','MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY');
    return s[v%7];
}

//星座
function szodStr(v){
    return '摩羯宝瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎射手'.substring(2*v,2*v+2)+'座';
}

//干支
function gzStr(v){
    return '癸甲乙丙丁戊己庚辛壬'.charAt(v%10)+'亥子丑寅卯辰巳午未申酉戌'.charAt(v%12);
}

//生肖
function zodStr(v){
    v%=12;
    return '猪鼠牛虎兔龙蛇马羊猴鸡狗'.charAt(v);
}

//农历月数
function lunMStr(v){
    var v0=abs(v);
    var str='一二三四五六七八九十';
    var vstr=str.charAt((v0-1)%10);
    if(v0>10)
        vstr='十'+vstr;
    if(v0==1)
        vstr='正';
    if(v<0)
        vstr='闰'+vstr;
    return vstr;
}

//农历日数
function lunDStr(v){
    var str='十一二三四五六七八九初十廿三';
    var vstr=str.charAt(floor(v/10)+10)+str.charAt(v%10);
    if(v==10)
        vstr='初十';
    return vstr;
}

//节气
function sStr(v){
    return '小寒大寒立春雨水惊蛰春分清明谷雨立夏小满芒种夏至小暑大暑立秋处暑白露秋分寒露霜降立冬小雪大雪冬至'.substring(2*v-2,2*v);
}

//公历类型
function calTypeStr(v){
    if(v==1){
        return '公历';
    }
    else if(v==2){
        return '格里历';
    }
    else{
        return '儒略历';
    }
}

//是否为格里历
function ifgStr(v){
    if(v==-1){
        alert('公历历法去掉了1582年10月5日至10月14日，因而这十天在历史上不存在！');
        return('不存在');
    }
    else
        return (v)?'格里历':'儒略历';
}

//朔望
function syzygyStr(syzygyType){
    if(syzygyType=='newMoon'){
        return '朔';
    }
    if(syzygyType=='fullMoon'){
        return '望';
    }
    return '';
}

//日月食
function ecliStr(v){
    var str='';
    if(v==1)
        str='日食';
    if(v==2)
        str='月全食';
    if(v==3)
        str='月偏食';
    return str;
}

//二十八宿
function stars28Str(n){
    var s='角亢氐房心尾箕斗牛女虚危室壁奎娄胃昴毕觜参井鬼柳星张翼轸';
    return s.charAt(n);
}

//月大月小
function mLStr(mL){
    if(mL==31){
        return '大';
    }
    else if(mL==30){
        return '小';
    }
    else{
        return '平';
    }
}


//--------节日函数--------//

//y年m月的第n个星期day是几月几号
function nDayDate(y,m,n,day,calType){
    var firstDay=Day(y,m,1,calType);
    var d;
    if(day>=firstDay){
        d=(n-1)*7+day-firstDay+1;
    }
    else{
        d=n*7+day-firstDay+1;
    }

    m=(m<10)?'0'+m:''+m;
    d=(d<10)?'0'+d:d;

    return m+d;
}

//y年m月的倒数第n个星期day是几月几号
function rnDayDate(y,m,n,day,calType){
    var lastDate;
    if(y<12){
        lastDate=D0(y,m+1,1,calType)-D0(y,m,1,calType);
    }
    else{
        lastDate=31;
    }
    var lastDay=Day(y,m,lastDate,calType);

    var d;
    if(day<=lastDay){
        d=lastDate-lastDay-(n-1)*7+day;
    }
    else{
        d=lastDate-lastDay-n*7+day;
    }

    m=(m<10)?'0'+m:''+m;
    d=(d<10)?'0'+d:d;

    return m+d;
}

//alert(nDayDate(2003,5,1,6,1));
//alert(rnDayDate(2003,6,1,0,1));

//公历节日
function sFtvl(y,m,d,calType){
    var sFtv=new Array(
        "0101元旦",
        "0214情人节",
        "0305学雷锋活动日",
        "0308国际妇女节",
        "0312植树节",
        "0315消费者权益日",
        "0401愚人节",
        "0501国际劳动节",
        "0504五四青年节",
        "0601国际儿童节",
        "0701中国共产党建党日 香港回归纪念日",
        "0801八一建军节",
        "0808中国男子节(爸爸节)",
        "0910中国教师节",
        "1001国庆节",
        "1220澳门回归纪念日",
        "1224平安夜",
        "1225圣诞节");

//某月的第几个星期几的节日
    var len0=sFtv.length;
//sFtv[len0]=nDayDate(y,1,1,0,calType)+"黑人日";
//sFtv[len0+1]=rnDayDate(y,1,1,0,calType)+"国际麻风节";
//sFtv[len0+2]=rnDayDate(y,3,1,1,calType)+"中小学生安全教育日";
//sFtv[len0+3]=rnDayDate(y,4,1,3,calType)+"秘书节";
//sFtv[len0+4]=nDayDate(y,5,2,0,calType)+"国际母亲节 救助贫困母亲日";
//sFtv[len0+5]=nDayDate(y,5,3,0,calType)+"全国助残日";
//sFtv[len0+6]=nDayDate(y,5,3,2,calType)+"国际牛奶日";
//sFtv[len0+7]=nDayDate(y,6,3,0,calType)+"国际父亲节";
//sFtv[len0+8]=nDayDate(y,9,3,2,calType)+"国际和平日";
//sFtv[len0+9]=nDayDate(y,9,3,6,calType)+"全民国防教育日";
//sFtv[len0+10]=nDayDate(y,9,4,0,calType)+"国际聋人节";
//sFtv[len0+11]=rnDayDate(y,9,1,0,calType)+"世界心脏日 世界海事日";
//sFtv[len0+12]=nDayDate(y,10,1,1,calType)+"国际住房日";
//sFtv[len0+13]=nDayDate(y,10,1,3,calType)+"国际减轻自然灾害日";
    sFtv[len0+14]=nDayDate(y,11,4,4,calType)+"感恩节";
//sFtv[len0+15]=nDayDate(y,12,2,0,calType)+"国际儿童电视广播日";


    var str=''; //公历节日

    for(i in sFtv){
        if(parseFloat(sFtv[i].substring(0,4))==100*m+d)
            str+=sFtv[i].substring(4,100);
    }
    return str;
}

//农历节日
function lunFtvl(lunM,lunD){
    var lunFtv=new Array(
        "0101新年",
        "0115元宵节",
        "0505端午节",
        "0523泼水节（阿昌族）",
        "0707七夕",
        "0715中元节",
        "0815中秋节",
        "0909重阳节",
        "1208腊八节",
        "1224小年",
        "1230除夕")

    var str=''; //农历节日

    for(i in lunFtv){
        if(parseFloat(lunFtv[i].substring(0,4))==100*lunM+lunD)
            str+=lunFtv[i].substring(4,100);
    }
    return str;
}

//节气节日
function jqFtvl(y,m,d,calType){
    var jqFtv=new Array();
    for(var i=1;i<=24;i++){
        var ind=(i<10)?('0'+i):i;
        jqFtv[i]=ind+''+sStr(i);
    }

    addName=new Array('','','','','','','节','',' 麦饭日','','','','','','','','','','','','','','','');

    var str=''; //节气节日
    var thisD0=D0(y,m,d,calType);

    for(i in jqFtv){
        if(floor(S(y,parseFloat(jqFtv[i].substring(0,2)),1,calType))==thisD0)
            str+=jqFtv[i].substring(2,100)+addName[i-1];
    }

    //梅雨
    var dG=gan(dGz(y,m,d,0,calType));
    var dZ=zhi(dGz(y,m,d,0,calType));

    var s11=floor(S(y,11,1,calType));
    if(thisD0>=s11&&thisD0<s11+10&&dG==3)
        str+=' 入梅';
    var s13=floor(S(y,13,1,calType));
    if(thisD0>=s13&&thisD0<s13+12&&dZ==8)
        str+=' 出梅';

    //三伏
    var s12=floor(S(y,12,1,calType));
    var s15=floor(S(y,15,1,calType));
    var n=(dG-7)%10+1;
    if(n<=0)
        n+=10;
    var firsrD0=thisD0-n+1;
//  if(firsrD0>=s12+20&&firsrD0<s12+30)
//    str+=' 初伏第'+n+'天';
//  if(firsrD0>=s15&&firsrD0<s15+10)
//    str+=' 末伏第'+n+'天';
//  else {
//  if(firsrD0>=s12+30&&firsrD0<s12+40)
//    str+=' 中伏第'+n+'天';
//  if(firsrD0>=s12+40&&firsrD0<s12+50)
//    str+=' 中伏第'+(n+10)+'天';
//  }

    //九九
//  var s24=floor(S(y,24,1,calType));
//  var s_24=floor(S(y-1,24,1,calType));
//  var d1=thisD0-s24;
//  var d2=thisD0-s_24+D0(y-1,12,31,calType)-D0(y-1,1,0,calType);
//  if(d1>=0||d2<=80){
//    if(m==12){
//      w=1;
//      v=d1+1;
//      if(v>9){
//        w+=1;
//        v-=9;
//      }
//    }
//    else{
//      var w=floor(d2/9)+1;
//      var v=round(rem(d2,9))+1;
//    }
//  str+=' '+lunDStr(w).charAt(1)+'九'+'第'+v+'天';
//  }

    return str;
}

//名人纪念日
function manFtvl(m,d){
    var manFtv=new Array(
        /*"0104雅各布·格林诞辰",
         "0108周恩来逝世纪念日",
         "0106圣女贞德诞辰",
         "0112杰克·伦敦诞辰",
         "0115莫里哀诞辰",
         "0117富兰克林诞辰",
         "0119瓦特诞辰",
         "0122培根诞辰",
         "0123郎之万诞辰",
         "0127莫扎特诞辰",
         "0129罗曼·罗兰诞辰",
         "0130甘地诞辰",
         "0131舒柏特诞辰",
         "0203门德尔松诞辰",
         "0207门捷列夫诞辰",
         "0211爱迪生诞辰，狄更斯诞辰",
         "0212林肯，达尔文诞辰",
         "0217布鲁诺诞辰",
         "0218伏打诞辰",
         "0219哥白尼诞辰",
         "0222赫兹，叔本华，华盛顿诞辰",
         "0226雨果诞辰",
         "0302斯美塔那诞辰",
         "0304白求恩诞辰",
         "0305周恩来诞辰",
         "0306布朗宁，米开朗琪罗诞辰",
         "0307竺可桢诞辰",
         "0314爱因斯坦诞辰",
         "0321巴赫，穆索尔斯基诞辰",
         "0322贺龙诞辰",
         "0328高尔基诞辰",
         "0401海顿，果戈理诞辰",
         "0415达·芬奇诞辰",
         "0416卓别林诞辰",
         "0420祖冲之诞辰",
         "0422列宁，康德，奥本海默诞辰",
         "0423普朗克，莎士比亚诞辰",
         "0430高斯诞辰",
         "0505马克思诞辰",
         "0507柴可夫斯基，泰戈尔诞辰",
         "0511冼星海诞辰",
         "0511李比希诞辰",
         "0520巴尔扎克诞辰",
         "0522瓦格纳诞辰",
         "0531惠特曼诞辰",
         "0601杜威诞辰",
         "0602哈代诞辰",
         "0608舒曼诞辰",
         "0715伦勃朗诞辰",
         "0805阿贝尔诞辰",
         "0808狄拉克诞辰",
         "0826陈毅诞辰",
         "0828歌德诞辰",
         "0909毛泽东逝世纪念日",
         "0925鲁迅诞辰",
         "0926巴甫洛夫诞辰",
         "0928孔子诞辰",
         "0929奥斯特洛夫斯基诞辰",
         "1011伯辽兹诞辰",
         "1021诺贝尔诞辰",
         "1022李斯特诞辰",
         "1026伽罗瓦诞辰",
         "1029李大钊诞辰",
         "1007居里夫人诞辰",
         "1108哈雷诞辰",
         "1112孙中山诞辰",
         "1124刘少奇诞辰",
         "1128恩格斯诞辰",
         "1201朱德诞辰",
         "1205海森堡诞辰",
         "1211玻恩诞辰",
         "1213海涅诞辰",
         "1216贝多芬诞辰",
         "1221斯大林诞辰",
         "1225牛顿诞辰",
         "1226毛泽东诞辰",
         "1229阿·托尔斯泰诞辰"*/);

    var str=''; //名人纪念日

    for(i in manFtv){
        if(parseFloat(manFtv[i].substring(0,4))==100*m+d)
            str+=manFtv[i].substring(4,100);
    }
    return str;
}



//年号
function chineseEra(y){
    var nh=new Array(
        "0579[北周]静帝(宇文阐) 大象",
        "0581[北周]静帝(宇文阐) 大定",
        "0581[隋]文帝(杨坚)　开皇",
        "0605[隋]炀帝(杨广)　大业",
        "0617[隋]恭帝(杨侑)　义宁",
        "0618[唐]高祖(李渊)　武得",
        "0627[唐]太宗(李世民)　贞观",
        "0650[唐]高宗(李治)　永徽",
        "0656[唐]高宗(李治)　显庆",
        "0661[唐]高宗(李治)　龙朔",
        "0664[唐]高宗(李治)　麟德",
        "0666[唐]高宗(李治)　乾封",
        "0668[唐]高宗(李治)　总章",
        "0670[唐]高宗(李治)　咸亨",
        "0674[唐]高宗(李治)　上元",
        "0676[唐]高宗(李治)　仪凤",
        "0679[唐]高宗(李治)　调露",
        "0680[唐]高宗(李治)　永隆",
        "0681[唐]高宗(李治)　开耀",
        "0682[唐]高宗(李治)　永淳",
        "0683[唐]高宗(李治)　弘道",
        "0684[唐]中宗(李显又名哲)　嗣圣、睿宗(李旦)　文明",
        "0684[唐]武后(武曌)　光宅",
        "0684[唐]武后(武曌)　光宅",
        "0685[唐]武后(武曌)　垂拱",
        "0690[武周]武则天　载初、天授",
        "0692[武周]武则天　如意、长寿",
        "0694[武周]武则天　延载",
        "0695[武周]武则天　证圣、天册万岁",
        "0696[武周]武则天　万岁登封、万岁通天",
        "0697[武周]武则天　神功",
        "0698[武周]武则天　圣历",
        "0700[武周]武则天　久视",
        "0701[武周]武则天　长安",
        "0705[唐]中宗(李显又名哲)复唐国号　神龙",
        "0707[唐]中宗(李显又名哲)复唐国号　景龙",
        "0710[唐]睿宗(李旦)　景云",
        "0712[唐]睿宗(李旦)　延和、玄宗(~隆基)　先天",
        "0713[唐]玄宗(李隆基)　开元",
        "0742[唐]玄宗(李隆基)　天宝",
        "0756[唐]肃宗(李亨)　至德",
        "0758[唐]肃宗(李亨)　乾元",
        "0760[唐]肃宗(李亨)　上元",
        "0762[唐]代宗(李豫)　宝应",
        "0763[唐]代宗(李豫)　广德",
        "0765[唐]代宗(李豫)　永泰",
        "0766[唐]代宗(李豫)　大历",
        "0780[唐]德宗(李适)　建中",
        "0784[唐]德宗(李适)　兴元",
        "0785[唐]德宗(李适)　贞元",
        "0805[唐]顺宗(李诵)　永贞",
        "0806[唐]宪宗(李纯)　元和",
        "0821[唐]穆宗(李恒)　长庆",
        "0825[唐]敬宗(李湛)　宝历",
        "0826[唐]文宗(李昂)　宝历",
        "0827[唐]文宗(李昂)　大(太)和",
        "0841[唐]武宗(李炎)　会昌",
        "0847[唐]宣宗(李忱)　大中",
        "0859[唐]懿宗(李漼)　大中",
        "0860[唐]懿宗(李漼)　咸通",
        "0873[唐]僖宗(李儇)　咸通",
        "0874[唐]僖宗(李儇)　乾符",
        "0873[唐]僖宗(李儇)　广明",
        "0881[唐]僖宗(李儇)　中和",
        "0885[唐]僖宗(李儇)　光启",
        "0888[唐]僖宗(李儇)　文德",
        "0889[唐]昭宗(李晔)　龙纪",
        "0890[唐]昭宗(李晔)　大顺",
        "0892[唐]昭宗(李晔)　景福",
        "0894[唐]昭宗(李晔)　乾宁",
        "0898[唐]昭宗(李晔)　光化",
        "0901[唐]昭宗(李晔)　天复",
        "0904[唐]哀帝(李柷)　天祐",

        "0907[辽]太祖(耶律阿保机)",
        "0927[辽]太宗(耶律德光)　天显",
        "0938[辽]太宗(耶律德光)　会同",
        "0947[辽]世宗(耶律阮)　天禄",
        "0951[辽]穆宗(耶律璟)　应历",
        "0969[辽]景宗(耶律贤)　保宁",
        "0979[辽]景宗(耶律贤)　乾亨",
        "0982[辽]圣宗(耶律隆绪)　乾亨",
        "0983[辽]圣宗(耶律隆绪)　统和",
        "1012[辽]圣宗(耶律隆绪)　开泰",
        "1021[辽]圣宗(耶律隆绪)　太平",
        "1031[辽]兴宗(耶律宗真)　景福",
        "1032[辽]兴宗(耶律宗真)　重熙",
        "1055[辽]道宗(耶律洪基)　清宁",
        "1065[辽]道宗(耶律洪基)　咸雍",
        "1075[辽]道宗(耶律洪基)　大(太)康",
        "1085[辽]道宗(耶律洪基)　大安",
        "1095[辽]道宗(耶律洪基)　寿昌(隆)",
        "1101[辽]天祚帝(耶律延禧)　乾统",

        "1115[金]太祖(完颜旻，本名阿骨打)　收国",
        "1117[金]太祖(完颜旻，本名阿骨打)　天辅",
        "1123[金]太宗(完颜晟)　天会",
        "1135[金]熙宗(完颜亶)　天会",
        "1138[金]熙宗(完颜亶)　天眷",
        "1141[金]熙宗(完颜亶)　皇统",
        "1149[金]海陵王(完颜亮)　天德",
        "1153[金]海陵王(完颜亮)　贞元",
        "1156[金]海陵王(完颜亮)　正隆",
        "1161[金]世宗(完颜雍)　大定",
        "1190[金]章宗(完颜璟)　明昌",
        "1196[金]章宗(完颜璟)　承安",
        "1201[金]章宗(完颜璟)　泰和",

        "1206[元]太祖(孛儿只斤铁木真)(成吉思汗)",
        "1228[元]拖雷(监国)",
        "1229[元]太宗(孛儿只斤铁木真窝阔台)",
        "1242[元]乃马真后(称制)",
        "1246[元]定宗(孛儿只斤铁木真贵由)",
        "1249[元]海迷失后(称制)",
        "1249[元]海迷失后(称制)",
        "1249[元]海迷失后(称制)",
        "1249[元]海迷失后(称制)",
        "1249[元]海迷失后(称制)",
        "1249[元]海迷失后(称制)",
        "1251[元]宪宗(孛儿只斤铁木真蒙哥)",
        "1260[元]世祖(孛儿只斤铁木真忽必烈)　中统",
        "1264[元]世祖(孛儿只斤铁木真忽必烈)　至元",
        "1295[元]成宗(孛儿只斤铁木真铁穆耳)　元贞",
        "1297[元]成宗(孛儿只斤铁木真铁穆耳)　大德",
        "1308[元]武宗(孛儿只斤铁木真海山)　至大",
        "1312[元]仁宗(孛儿只斤铁木真爱育黎拔力八达)　皇庆",
        "1314[元]仁宗(孛儿只斤铁木真爱育黎拔力八达)　延祐",
        "1321[元]英宗(孛儿只斤铁木真硕德八剌)　至治",
        "1324[元]泰定帝(孛儿只斤铁木真也孙铁木儿)　泰定",
        "1328[元]泰定帝(孛儿只斤铁木真也孙铁木儿)　致和、天顺帝(阿速吉八)　天顺、文宗(~图帖睦尔)　天历",
        "1329[元]明宗(孛儿只斤铁木真和世“左‘王’右‘束’”)",
        "1330[元]明宗(孛儿只斤铁木真和世“左‘王’右‘束’”)　至顺",
        "1332[元]宁宗(孛儿只斤铁木真懿璘质班)　至顺",
        "1333[元]顺帝(孛儿只斤铁木真妥懽帖睦尔)　元统",
        "1335[元]顺帝(孛儿只斤铁木真妥懽帖睦尔)　至元",
        "1341[元]顺帝(孛儿只斤铁木真妥懽帖睦尔)　至正",

        "1368[明]太祖(朱元璋)　洪武",
        "1399[明]惠帝(朱允炆)　建文",
        "1403[明]成祖(朱棣)　永乐",
        "1425[明]仁宗(朱高炽)　洪熙",
        "1426[明]宣宗(朱瞻基)　宣德",
        "1436[明]英宗(朱祁镇)　正统",
        "1450[明]代宗(朱祁钰)(景帝)　景泰",
        "1457[明]英宗(朱祁镇)　天顺",
        "1465[明]宪宗(朱见深)　成化",
        "1488[明]孝宗(朱祐樘)　弘治",
        "1506[明]武宗(朱厚照)　正德",
        "1522[明]世宗(朱厚熜)　嘉靖",
        "1567[明]穆宗(朱载垕)隆庆",
        "1573[明]神宗(朱翊钧)　万历",
        "1616[清]太祖(爱新觉罗努尔哈赤)　天命",
        "1627[清]太宗(爱新觉罗皇太极)　天聪",
        "1636[清]太宗(爱新觉罗皇太极)　崇德",
        "1644[清]世祖(爱新觉罗福临)　顺治",
        "1662[清]圣祖(爱新觉罗玄烨)　康熙",
        "1723[清]世宗(爱新觉罗胤禛)　雍正",
        "1736[清]高宗(爱新觉罗弘历)　乾隆",
        "1796[清]仁宗(爱新觉罗颙琰)　嘉庆",
        "1821[清]宣宗(爱新觉罗旻宁)　道光",
        "1851[清]文宗(爱新觉罗奕詝)　咸丰",
        "1862[清]穆宗(爱新觉罗载淳)　同治",
        "1875[清]德宗(爱新觉罗载湉)　光绪",
        "1909[清]爱新觉罗溥仪　宣统",
        "1912中华民国",
        "1949中华人民共和国建国第");

    var alt=new Array(  //用于记载旧朝代末的年号，数字后无汉字的表示该朝当年灭亡
        "0907(五代)[后梁]太祖(朱晃,又名温、全忠)　开平",
        "0911(五代)[后梁]太祖(朱晃,又名温、全忠)　乾化",
        "0913(五代)[后梁]末帝(朱瑱)　乾化",
        "0915(五代)[后梁]末帝(朱瑱)　贞明",
        "0921(五代)[后梁]末帝(朱瑱)　龙德",
        "923",
        "0923(五代)[后唐]庄宗(李存勖)　同光",
        "0926(五代)[后唐]明宗(~亶)　天成",
        "0930(五代)[后唐]明宗(~亶)　天成",
        "0934(五代)[后唐]末帝(~从珂)　清泰",
        "0936",
        "0936(五代)[后晋]高祖(石敬瑭)　天福",
        "0942(五代)[后晋]高祖(石敬瑭)　出帝",
        "0944[后晋]高祖(石敬瑭)　开运",
        "0947",
        "0947(五代)[后汉]高祖(刘暠,本名知远)　天福",
        "0948(五代)[后汉]隐帝(刘承祐)　乾祐",
        "0950",
        "0951(五代)[后周]太祖(郭威)　广顺",
        "0954(五代)[后周]世宗(柴荣)　显德",
        "0959(五代)[后周]恭帝(宗训)　显德",
        "0960",
        "0960[北宋]太祖(赵匡胤)　建隆",
        "0963[北宋]太祖(赵匡胤)　乾德",
        "0968[北宋]太祖(赵匡胤)　开宝",
        "0976[北宋]太宗(赵炅,本名匡义,又名光义)　太平兴国",
        "0984[北宋]太宗(赵炅,本名匡义,又名光义)　雍熙",
        "0988[北宋]太宗(赵炅,本名匡义,又名光义)　端拱",
        "0990[北宋]太宗(赵炅,本名匡义,又名光义)　淳化",
        "0995[北宋]太宗(赵炅,本名匡义,又名光义)　至道",
        "0998[北宋]真宗(赵恒)　咸平",
        "1004[北宋]真宗(赵恒)　景德",
        "1008[北宋]真宗(赵恒)　大中祥符",
        "1017[北宋]真宗(赵恒)　天禧",
        "1022[北宋]真宗(赵恒)　乾兴",
        "1023[北宋]仁宗(赵祯)　天圣",
        "1032[北宋]仁宗(赵祯)　明道",
        "1034[北宋]仁宗(赵祯)　景祐",
        "1038[北宋]仁宗(赵祯)　宝元",
        "1040[北宋]仁宗(赵祯)　康定",
        "1041[北宋]仁宗(赵祯)　庆历",
        "1049[北宋]仁宗(赵祯)　皇祐",
        "1054[北宋]仁宗(赵祯)　至和",
        "1056[北宋]仁宗(赵祯)　嘉祐",
        "1064[北宋]英宗(赵曙)　治平",
        "1068[北宋]神宗(赵顼)　熙宁",
        "1078[北宋]神宗(赵顼)　元丰",
        "1086[北宋]哲宗(赵煦)　元祐",
        "1094[北宋]哲宗(赵煦)　绍圣",
        "1098[北宋]哲宗(赵煦)　元符",
        "1101[北宋]徽宗(赵佶)　建中靖国",
        "1102[北宋]徽宗(赵佶)　崇宁",
        "1107[北宋]徽宗(赵佶)　大观",
        "1111[北宋]徽宗(赵佶)　政和",
        "1118[北宋]徽宗(赵佶)　重和",
        "1119[北宋]徽宗(赵佶)　宣和",
        "1126[北宋]钦宗(赵桓)　靖康",
        "1127",
        "1209[金]卫绍王(完颜永济)　大安",
        "1212[金]卫绍王(完颜永济)　崇庆",
        "1213[金]宣宗(~珣)　贞祐",
        "1217[金]宣宗(完颜珣)　兴定",
        "1222[金]宣宗(完颜珣)　元光",
        "1224[金]哀宗(完颜守绪)　正大",
        "1224[金]哀宗(完颜守绪)　正大",
        "1232[金]天兴",
        "1234",
        "1620[明]光宗(朱常洛)　泰昌",
        "1621[明]熹宗(朱由校)　天启",
        "1628[明]思宗(朱由检)　崇祯",
        "1644");

    var alt2=new Array(  //用于记载旧朝代末的年号，数字后无汉字的表示该朝当年灭亡
        "1111[辽]天祚帝(耶律延禧)　天庆",
        "1121[辽]天祚帝(耶律延禧)　保大",
        "1125",
        "1127[南宋]高宗(赵构)　建炎",
        "1131[南宋]高宗(赵构)　绍兴",
        "1165[南宋]孝宗(赵昚)　隆兴",
        "1174[南宋]孝宗(赵昚)　乾道",
        "1183[南宋]孝宗(赵昚)　淳熙",
        "1190[南宋]光宗(赵惇)　绍熙",
        "1195[南宋]宁宗(赵扩)　庆元",
        "1201[南宋]宁宗(赵扩)　嘉泰",
        "1205[南宋]宁宗(赵扩)　开禧",
        "1208[南宋]宁宗(赵扩)　嘉定",
        "1225[南宋]理宗(赵昀)　宝庆",
        "1228[南宋]理宗(赵昀)　绍定",
        "1234[南宋]理宗(赵昀)　端平",
        "1237[南宋]理宗(赵昀)　嘉熙",
        "1241[南宋]理宗(赵昀)　淳祐",
        "1253[南宋]理宗(赵昀)　宝祐",
        "1259[南宋]理宗(赵昀)　开庆",
        "1260[南宋]理宗(赵昀)　景定",
        "1265[南宋]度宗(赵禥)　咸淳",
        "1275[南宋]恭帝(赵?繁体“显”去掉右边“页”)　德祐",
        "1276[南宋]端宗(赵昰)　景炎",
        "1278[南宋]帝昺(赵昺)　祥兴",
        "1279");

    var str='',str1='',str3=''; //年号

    for(i in nh){
        var y0=parseFloat(nh[i].substring(0,4));
        var n=y-y0+1;
        if(n>0)
            str=nh[i].substring(4,100)+n+'年';
        if(y>=1111&&y<1115)
            str='';
    }
    for(i in alt){
        var y0=parseFloat(alt[i].substring(0,4));
        var n=y-y0+1;
        if(n>0){
            var str2=alt[i].substring(4,100);
            if(str2!='')
                str1=str2+n+'年';
            else
                str1='';
        }
    }
    for(i in alt2){
        var y0=parseFloat(alt2[i].substring(0,4));
        var n=y-y0+1;
        if(n>0){
            var str4=alt2[i].substring(4,100);
            if(str4!='')
                str3=str4+n+'年';
            else
                str3='';
        }
    }
    return str+'　'+str1+'　'+str3;
}

//alert(chineseEra(1506));

function timeZoneName(zone){
    var address=new Array(
        '西12区:埃尼威托克岛,夸贾林岛',
        '西11区:中途岛,东萨摩亚',
        '西10区:夏威夷',
        '西9区:阿拉斯加',
        '西8区:太平洋时间（美国和加拿大）,蒂华纳',
        '西7区:山地时间（美国和加拿大）,亚利桑那',
        '西6区:中部时间（美国和加拿大）,墨西哥城,特古西加尔巴,萨斯喀彻温省',
        '西5区:东部时间（美国和加拿大）,印第安那州（东部）,波哥大,利马,基多',
        '西4区:大西洋时间（加拿大）,加拉加斯,拉巴斯',
        '西3区:巴西利亚,布宜诺斯艾利斯,乔治敦',
        '西2区:中大西洋',
        '西1区:亚速尔群岛,佛得角群岛',
        '零时区:伦敦,都柏林,爱丁堡,里斯本,卡萨布兰卡,蒙罗维亚',
        '东1区:阿姆斯特丹,柏林,伯尔尼,罗马,斯德哥尔摩,维也纳,贝尔格莱德,布拉迪斯拉发,布达佩斯,卢布尔雅那,布拉格,布鲁赛尔,哥本哈根,马德里,巴黎,萨拉热窝,斯科普里,索非亚,华沙,萨格勒布',
        '东2区:布加勒斯特,哈拉雷,比勒陀尼亚,赫尔辛基,里加,塔林,开罗,雅典,伊斯坦布尔,明斯克,以色列',
        '东3区:巴格达,科威特,利雅得,莫斯科,圣彼得堡,伏尔加格勒,内罗毕',
        '东4区:阿布扎比,马斯喀特,巴库,第比利斯',
        '东5区:叶卡特琳堡,伊斯兰堡,卡拉奇,塔什干',
        '东6区:阿拉木图,达卡,科伦坡',
        '东7区:曼谷,河内,雅加达',
        '东8区:北京,重庆,广州,上海,香港,乌鲁木齐,台北,新加坡,佩思',
        '东9区:平壤,汉城,东京,大阪,札幌,雅库茨克',
        '东10区:布里斯班,关岛,莫尔兹比港,霍巴特,堪培拉,墨尔本,悉尼',
        '东11区:马加丹,所罗门群岛,新喀里多尼亚',
        '东12区:奥克兰,惠灵顿,斐济,堪察加半岛,马绍尔群岛'
    );

    return address[zone+12];
}





/**********************************以上为外部引用js的内容**************************************************/

//节气子类
function sTermClass(year,month,date,time,zone,calType,monthLength){
   var sN0=2*month-2;
   var sDt0=S(year,sN0,1,calType);
   var sD0=revD0(year,floor(sDt0),calType);
   var sM0=floor(sD0/100);
   sDate0=sD0%100;

   var sN1=2*month-1;
   var sDt1=S(year,sN1,1,calType);
   var sD1=revD0(year,floor(sDt1),calType);
   var sM1=floor(sD1/100);
   var sDate1=sD1%100;

   var sN2=2*month;
   var sDt2=S(year,sN2,1,calType);
   var sD2=revD0(year,floor(sDt2),calType);
   var sM2=floor(sD2/100);
   var sDate2=sD2%100;

   var sN3=2*month+1;
   if(sN3>24)
      sN3-=24;
   var sDt3=S(year,sN3,1,calType);
   var sD3=revD0(year,floor(sDt3),calType);
   var sM3=floor(sD3/100);
   var sDate3=sD3%100;

   if(sM0==month){
     sN2=sN1; sN1=sN0;
     sDt2=sDt1; sDt1=sDt0; 
     sDate2=sDate1; sDate1=sDate0; 
   }

   if(sM3==month){
     sN1=sN2; sN2=sN3;
     sDt1=sDt2; sDt2=sDt3; 
     sDate1=sDate2; sDate2=sDate3; 
   }

   sN1=rem(sN1-1,24)+1;
   sN2=rem(sN2-1,24)+1;

   if(sDate2>monthLength){
     sDate2-=monthLength;
   }

   var sT1=sStr(sN1)+':'+month+'月'+sDate1+'日'+dToStr(tail(sDt1));
   var sT2=sStr(sN2)+':'+month+'月'+sDate2+'日'+dToStr(tail(sDt2));

   this.sTermInMonth=new Array(sT1,sT2);

   if(date==sDate1){
     this.sTermName=sStr(sN1);
     this.sTermTime=dToStr(tail(sDt1));
   }
   else if(date==sDate2){
     this.sTermName=sStr(sN2);
     this.sTermTime=dToStr(tail(sDt2));
   }
   else{
     this.sTermName='';
     this.sTermTime='';
   }
}

//农历子类
function lunarClass(year,month,date,calType){
   var lunarInfo=new lunarCal(year,month,date,calType);

   this.lunarDate=lunarInfo.date;
   this.lunarDate_Str=lunDStr(this.lunarDate);
   this.lunarMonth=lunarInfo.month;
   this.lunarMonth_Str=lunMStr(this.lunarMonth);
   this.syzygyType=lunarInfo.syzygyType;
   this.syzygyTime=lunarInfo.syzygyTime;
   this.syzygyTime_Str=(this.syzygyTime==-1)?'':dToStr(this.syzygyTime);
   this.syzygyName=syzygyStr(this.syzygyType);
   this.ecliType=lunarInfo.ecliType;
   this.ecliType_Str=ecliStr(lunarInfo.ecliType);
   this.ecliTime=lunarInfo.ecliTime;
   this.ecliTime_Str=(this.ecliTime==-1)?'':dToStr(this.ecliTime);
   
   this.lunFtvl=function (){
     return lunFtvl(this.lunarMonth,this.lunarDate);
   }
}


//中国日历类（Chinese Calendar Class（CCC））

function CCC(year,month,date,time,zone,calType){

  ////////////////////////////函数参数兼容处理////////////////////////////
  //三参数: CCC(year,month,date)
  if(calType==undefined&&zone==undefined&&time==undefined){
      time="0:0:0:0";  //默认为零时
      zone=8;  //默认为北京时间
      calType=1;  //默认为Gregorian
  }

  //四参数
  else if(calType==undefined&&zone==undefined){
    //四参数1:  CCC(year,month,date,time)
    if(isNaN(time)){
      zone=8;  //默认为北京时间
      calType=1;  //默认为Gregorian
    }

    //四参数2:  CCC(year,month,date,calType)
    else{
      calType=time;
      zone=8;  //默认为北京时间
      time="0:0:0:0";  //默认为零时
    }
  }

  //五参数: CCC(year,month,date,time,calType)
  else if(calType==undefined){
    calType=zone;
    zone=8;  //默认为北京时间
  }

   ///////////////////////////////////////////////////////////////////////

   //////////////////////////  公历属性  //////////////////////////////

   this.year=function (){
     return year;	
   }
   this.month=function (){
     return month;	
   }
   this.date=function (){
     return date;	
   }
   this.time=function (){
     return time;	
   }
   this.zone=function (){
     return zone;	
   }
   this.calType=function (){
     return calType;	
   }
   
   this.calType_Str=function (){
     return calTypeStr(this.calType());	
   }

   var timeArray=time.split(':');

   this.hour=function (){
     return parseInt(timeArray[0]);	
   }
   this.minute=function (){
     return parseInt(timeArray[1]);	
   }
   this.second=function (){
     return parseInt(timeArray[2]);
   }

   this.JulianDay=function (){
     return JD(this.year(),this.month(),this.date(),this.hour(),this.minute(),this.second(),this.zone(),this.calType());
   }

   this.day=function (){
     return Day(this.year(),this.month(),this.date(),this.calType());
   }
   this.day_Str=function (){
     return dayStr(this.day());
   }
   this.day_ENStr=function (){
     return dayENStr(this.day());
   }

   this.solarZodiac=function (){
     return sZod(this.month(),this.date());
   }
   this.solarZodiac_Str=function (){
     return szodStr(this.solarZodiac());
   }
   
   this.yGz=function (){
     return yGz(this.year(),this.month(),this.date(),this.hour(),this.calType());
   }
   this.yGz_Str=function (){
     return gzStr(this.yGz());
   }
   this.mGz=function (){
     return mGz(this.year(),this.month(),this.date(),this.hour(),this.calType());
   }
   this.mGz_Str=function (){
     return gzStr(this.mGz());
   }
   this.dGz=function (){
     return dGz(this.year(),this.month(),this.date(),this.hour(),this.calType());
   }
   this.dGz_Str=function (){
     return gzStr(this.dGz());
   }
   this.hGz=function (){
     return hGz(this.year(),this.month(),this.date(),this.hour(),this.calType());
   }
   this.hGz_Str=function (){
     return gzStr(this.hGz());
   }   

   this.stars28=function (){
     return stars28(this.year(),this.month(),this.date(),this.calType());
   }
   this.stars28_Str=function (){
     return stars28Str(this.stars28());
   }      
   
   this.sFtvl=function (){
     return sFtvl(this.year(),this.month(),this.date(),this.calType());
   }
   this.jqFtvl=function (){
     return jqFtvl(this.year(),this.month(),this.date(),this.calType());
   }
   
   this.monthLength=function (){
     return D0(this.year(),this.month()+1,1,this.calType())-D0(this.year(),this.month(),1,this.calType());
   } 
   this.monthLength_Str=function (){
     return mLStr(this.monthLength());
   } 

   this.chineseZodiacName=function (){
     return zodStr(this.yGz());
   }
   
   this.chineseEra=function (){
     return chineseEra(this.year());	
   }
   
   
   ///////////////////////所在阳历月的两个节气日期和交节时刻/////////////////////////
   this.solarTerm=function (){
     return new sTermClass(year,month,date,time,zone,calType,this.monthLength());
   }


   
   //////////////////////////  农历属性  //////////////////////////////
  this.lunar=function (){
    return new lunarClass(year,month,date,calType);
  }


}




